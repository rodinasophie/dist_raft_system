# Building script for a distributed system based on Raft algorithm
# Client's side

LOCAL_PATH = "../../"

LOCAL_SOURCE_PATH   = LOCAL_PATH + "src"
LOCAL_INCLUDES_PATH = LOCAL_PATH + "include"
LOCAL_LIB_PATH      = LOCAL_PATH + "lib"

CLIENT_PATH = LOCAL_SOURCE_PATH + '/' + "client"
CLIENT_INCLUDES = LOCAL_INCLUDES_PATH + '/' + "client"

SOCKET_INCLUDES = LOCAL_INCLUDES_PATH + '/' + "socket"

def addprefix(prefix, items):
	result = []
	for item in items:
		result += [prefix + item]
	return result

SYSTEM_SRC = Split("""
	RaftClient.cpp
	client_main.cpp
	""")

SOCKET_PATH = LOCAL_SOURCE_PATH + '/' + "socket"
SOCKET_SRC = Split("""
	UnixSocket.cpp
	""")

SOURCE_FILES = ( \
	(addprefix(CLIENT_PATH + '/', SYSTEM_SRC)) + \
	(addprefix(SOCKET_PATH + '/', SOCKET_SRC)) \
	)

LOCAL_INCLUDES = ( \
	[CLIENT_INCLUDES] + \
	[SOCKET_INCLUDES] + \
	[LOCAL_INCLUDES_PATH] + \
	[LOCAL_PATH] + \
	[LOCAL_LIB_PATH] + \
	[LOCAL_LIB_PATH + "/json/src"] \
	)

LOCAL_FLAGS = '-g -O3 -std=c++11 -Wnon-virtual-dtor -pthread'
CCFLAGS = '-Wall -Winvalid-pch -Werror '
LOCAL_LINKFLAGS = ["-rdynamic", "-pthread"]

env = Environment(CPPFLAGS = LOCAL_FLAGS,
									CPPPATH = LOCAL_INCLUDES,
									CCFLAGS=CCFLAGS,
									LINKFLAGS = LOCAL_LINKFLAGS)
VariantDir("../../out/", '.', duplicate = 0)
env.Program(target = "../../out/client", source = SOURCE_FILES)
